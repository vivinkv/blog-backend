<%- include('../wrapper/header') %>

<!-- Sidebar -->
<%- include('../components/sidenav') %>

<div class="flex-1 md:ml-40 p-8">
  <div class="overflow-x-auto">
    <div class="flex justify-between my-5">
      <h1 class="text-3xl font-bold"><%= title %></h1>
      <div class="flex gap-5">
        <a
          href="javascript:void(0);"
          id="openModalButton"
          class="w-16 bg-blue-500 text-white py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-red-400 flex justify-center"
        >
          <img src="/notification_add.svg" class="h-6 w-6" alt="add" />
        </a>
      </div>
    </div>

    <!-- Delete Confirmation Popup -->
    <div
      id="delete-confirmation"
      class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center hidden"
    >
      <div class="bg-white p-6 rounded-lg shadow-lg w-96">
        <h2 class="text-xl font-semibold mb-4">Are you sure?</h2>
        <p class="text-gray-600 mb-6">
          Do you really want to delete the notification:
          <span class="font-bold" id="notification-title">notification</span>?
        </p>
        <div class="flex justify-end gap-4">
          <button
            id="cancel-delete"
            class="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300"
          >
            Cancel
          </button>
          <button
            id="confirm-delete"
            class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>

    <!-- Notification Form Modal -->
    <div
      id="modal"
      class="modal fixed inset-0 z-10 bg-black bg-opacity-50 flex justify-center items-center hidden"
    >
      <div class="bg-white p-6 rounded-lg shadow-lg w-96">
        <h2 id="modal-title" class="text-xl font-semibold mb-4">
          Create New Notification
        </h2>

        <form
          id="notification-form"
          class="grid grid-cols-2 gap-4"
          enctype="multipart/form-data"
        >
          <div class="col-span-2">
            <p class="text-gray-600 mb-2">Enter Name</p>
            <input
              type="text"
              id="name"
              required
              minlength="3"
              class="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Name"
              list="name-options"
            />
            <datalist id="name-options">
              <% users.forEach(user => { %>
              <option
                data-id="<%= user.dataValues.id %>"
                value="<%= user.dataValues.name %>"
              ></option>
              <% }) %>
            </datalist>
            <p class="text-red-600 mt-1" id="nameError"></p>
          </div>

          <div>
            <p class="text-gray-600 mb-2">Type</p>
            <select
              id="type"
              class="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              <option selected value="email">Email</option>
              <option value="whatsapp">WhatsApp</option>
              <option value="sms">SMS</option>
            </select>
          </div>

          <div id="option-container">
            <p class="text-gray-600 mb-2">Option</p>
            <select
              id="option"
              class="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              <option selected value="to">To</option>
              <option value="cc">Cc</option>
              <option value="bcc">Bcc</option>
            </select>
          </div>

          <div class="col-span-2">
            <p class="text-gray-600 mb-2">Contact</p>
            <input
              type="email"
              id="contact"
              class="w-full px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Contact"
            />
            <p class="text-red-600 mt-1" id="contactError"></p>
          </div>
        </form>

        <div class="flex justify-end gap-4 mt-6">
          <button
            id="saveNotification"
            class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
          >
            Save
          </button>
          <button id="closeModalButton" class="bg-gray-300 px-4 py-2 rounded">
            Cancel
          </button>
        </div>
      </div>
    </div>

    <table class="min-w-full bg-white border rounded-lg shadow-lg">
      <thead class="bg-blue-100">
        <tr>
          <th class="py-2 px-4 text-left text-blue-900 min-w-[100px]">Name</th>
          <th class="py-2 px-4 text-left text-blue-900 min-w-[20px]">Type</th>
          <th class="py-2 px-4 text-left text-blue-900 min-w-[20px]">Option</th>
          <th class="py-2 px-4 text-left text-blue-900 min-w-[100px]">
            Contact
          </th>
          <th class="py-2 px-4 text-left text-blue-900 min-w-[100px]">
            Active
          </th>
          <th class="py-2 px-4 text-left text-blue-900 min-w-[100px]">
            Action
          </th>
        </tr>
      </thead>
      <tbody>
        <% if (data.length > 0) { %> <% for (let i = 0; i < data.length; i++) {
        %>
        <tr class="border border-gray-200">
          <td class="py-2 px-4 text-blue-900 border border-gray-200 w-72">
            <a href="" class="text-ellipsis">
              <%= data[i].dataValues.name %>
            </a>
          </td>
          <td class="py-2 px-4 text-blue-900 border border-gray-200 w-32">
            <a href="" class="text-ellipsis">
              <span class="<%= data[i].dataValues.type === 'whatsapp' ? 'bg-green-500' : data[i].dataValues.type === 'email' ? 'bg-red-500' : data[i].dataValues.type === 'sms' ? 'bg-yellow-500' : '' %> text-white px-2 py-1 rounded">
                <%= data[i].dataValues.type %>
              </span>
            </a>
          </td>
          <td class="py-2 px-4 text-blue-900 border border-gray-200 w-20">
            <a href="" class="text-ellipsis">
              <%= data[i].dataValues.option %>
            </a>
          </td>
          <td class="py-2 px-4 text-blue-900 border border-gray-200 w-72">
            <a href="" class="text-ellipsis">
              <%= data[i].dataValues.contact %>
            </a>
          </td>
          <td class="py-2 px-4 text-blue-900 border border-gray-200 w-40">
            <a
              href="/admin/notifications?id=<%= data[i].dataValues.id %>&is_active=<%= data[i].dataValues.is_active %>"
              id="published-btn"
              class="inline-flex items-center px-3 py-1 text-sm font-medium text-white <%= data[i].dataValues.is_active ? 'bg-green-500' : 'bg-red-500' %> rounded"
              data-id="<%= data[i].dataValues.is_active %>"
              data-publish="<%= data[i].dataValues.is_active %>"
            >
              <%= data[i].dataValues.is_active ? 'Active' : 'In Active' %>
            </a>
          </td>
          <td class="py-2 px-4 space-x-2 border border-gray-200 w-40">
            <div class="flex justify-start gap-x-5 max-xl:w-52">
              <a
                href="javascript:void(0);"
                data-id="<%= data[i].dataValues.id %>"
                data-name="<%= data[i].dataValues.name %>"
                data-type="<%= data[i].dataValues.type %>"
                data-option="<%= data[i].dataValues.option %>"
                data-contact="<%= data[i].dataValues.contact %>"
                class="bg-blue-500 p-2 rounded hover:text-blue-800 edit-link"
              >
                <img src="/edit.svg" class="w-7 h-7" alt="edit icon" />
              </a>
              <% if (!data[i].dataValues.is_active) { %>
              <a
                href="javascript:void(0);"
                data-id="<%= data[i].dataValues.id %>"
                data-title="<%= data[i].dataValues.title%>"
                class="bg-red-500 p-2 rounded text-red-600 hover:text-red-800 delete-link"
              >
                <img src="/delete.svg" class="w-7 h-7" alt="delete icon" />
              </a>
              <% } %>
            </div>
          </td>
        </tr>
        <% } %> <% } %>
      </tbody>
    </table>
  </div>
</div>

<%- include('../wrapper/footer') %>

<!-- Script for Modal functionality -->
<script>
  // Get elements
  const modal = document.getElementById("modal");
  const openModalButton = document.getElementById("openModalButton");
  const closeModalButton = document.getElementById("closeModalButton");
  const saveNotificationButton = document.getElementById("saveNotification");
  const typeSelect = document.getElementById("type");
  const optionSelect = document.getElementById("option");
  const contactInput = document.getElementById("contact");
  const nameInput = document.getElementById("name");
  const form = document.getElementById("notification-form");

  let editingNotificationId = null; // Store the ID of the notification being edited

  // Function to open modal and reset form fields
  openModalButton.addEventListener("click", () => {
    // Reset form values to null or empty
    nameInput.value = "";
    typeSelect.value = "email"; // Default value
    optionSelect.value = "to"; // Default value
    contactInput.value = "";

    // Set contact input type to 'email' initially as default
    contactInput.type = "email";
    contactInput.placeholder = "Email";

    // Set modal title
    document.getElementById("modal-title").textContent =
      "Create New Notification";

    // Show modal
    modal.classList.remove("hidden");
    editingNotificationId = null; // Reset editing ID
  });

  // Function to close modal
  closeModalButton.addEventListener("click", () => {
    modal.classList.add("hidden");
  });

  // Change input type based on selected option
  typeSelect.addEventListener("change", () => {
    if (typeSelect.value === "email") {
      contactInput.type = "email";
      contactInput.placeholder = "Email";
      document.getElementById("option-container").style.display = "block";
    } else {
      contactInput.type = "number";
      contactInput.placeholder = "Phone Number";
      document.getElementById("option-container").style.display = "none";
    }
  });

  // Function to save notification (console log input values)
  saveNotificationButton.addEventListener("click", async (event) => {
    document.getElementById("nameError").classList.add("hidden");
    document.getElementById("contactError").classList.add("hidden");
    event.preventDefault();

    // Fetch input values
    const name = nameInput.value;
    const type = typeSelect.value;
    const option = optionSelect.value;
    const contact = contactInput.value;

    const method = editingNotificationId ? "PUT" : "POST"; // Use PUT for editing
    const url = editingNotificationId
      ? `${window.location.origin}/admin/notifications/${editingNotificationId}`
      : `${window.location.origin}/admin/notifications`;

    // Log input values to the console
    console.log("Name:", name);
    console.log("Type:", type);
    console.log("Option:", option);
    console.log("Contact:", contact);

    const response = await fetch(url, {
      method: method,
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ name, contact, option, type }),
    });

    const result = await response.json();

    if (response.status == 201 || response.status == 200) {
      showToast("Saved Successfully", true);
      // Reset form fields after saving
      form.reset();

      // Close the modal
      modal.classList.add("hidden");
    } else {
      if (result?.type == "email") {
        document.getElementById("contactError").classList.remove("hidden");
        document.getElementById("contactError").innerText = result?.err;
      } else if (result?.type == "name") {
        document.getElementById("nameError").classList.remove("hidden");
        document.getElementById("nameError").innerText = result?.err;
      } else {
        showToast(result?.err, false);
      }
    }
  });

  function showToast(message, isSuccess) {
    const toast = document.createElement("div");
    toast.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg text-white ${
      isSuccess ? "bg-green-500" : "bg-red-500"
    }`;
    toast.innerText = message;
    document.body.appendChild(toast);
    setTimeout(() => {
      toast.remove();
      if (isSuccess) window.location.href = "/admin/notifications";
    }, 3000);
  }

  // Function to handle edit button click
  document.querySelectorAll(".edit-link").forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault(); // Prevent default link behavior

      // Get notification details from the clicked button
      editingNotificationId = button.getAttribute("data-id");
      const name = button.getAttribute("data-name");
      const type = button.getAttribute("data-type");
      const option = button.getAttribute("data-option");
      const contact = button.getAttribute("data-contact");

      // Set form fields with existing data
      nameInput.value = name;
      typeSelect.value = type;
      optionSelect.value = option;
      contactInput.value = contact;

      // Update modal title
      document.getElementById("modal-title").textContent = "Edit Notification";

      // Set contact input type based on selected type
      if (type === "email") {
        contactInput.type = "email";
        contactInput.placeholder = "Email";
      } else {
        contactInput.type = "number";
        contactInput.placeholder = "Phone Number";
      }

      // Show modal
      modal.classList.remove("hidden");
    });
  });

  // Get elements for delete confirmation
  const deleteConfirmationModal = document.getElementById(
    "delete-confirmation"
  );
  const cancelDeleteButton = document.getElementById("cancel-delete");
  const confirmDeleteButton = document.getElementById("confirm-delete");
  const notificationTitle = document.getElementById("notification-title");

  let deleteNotificationId = null; // Store the ID of the notification to delete

  // Function to open delete confirmation modal
  document.querySelectorAll(".delete-link").forEach((button) => {
    button.addEventListener("click", (event) => {
      event.preventDefault(); // Prevent default link behavior

      // Get notification details from the clicked button
      deleteNotificationId = button.getAttribute("data-id");
      const title = button.getAttribute("data-title");

      // Update modal content
      notificationTitle.textContent = title;

      // Show the delete confirmation modal
      deleteConfirmationModal.classList.remove("hidden");
    });
  });

  // Function to close delete confirmation modal
  cancelDeleteButton.addEventListener("click", () => {
    deleteConfirmationModal.classList.add("hidden");
  });

  // Function to confirm and perform deletion
  confirmDeleteButton.addEventListener("click", async () => {
    if (deleteNotificationId === null) return;

    // Hide delete confirmation modal and refresh page
    deleteConfirmationModal.classList.add("hidden");
    window.location.href = `/admin/notifications/${deleteNotificationId}/delete`;
  });

  // Function to show toast notifications
  function showToast(message, isSuccess) {
    const toast = document.createElement("div");
    toast.className = `fixed bottom-4 right-4 p-4 z-[-1] rounded-lg shadow-lg text-white ${
      isSuccess ? "bg-green-500" : "bg-red-500"
    }`;
    toast.innerText = message;
    document.body.appendChild(toast);
    setTimeout(() => {
      toast.remove();
      if (isSuccess) window.location.href = "/admin/notifications";
    }, 3000);
  }
</script>
